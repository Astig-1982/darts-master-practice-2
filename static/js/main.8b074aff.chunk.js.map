{"version":3,"sources":["redux/target/target.selectors.js","redux/name/name.selectors.js","components/theTarget/the-target.component.jsx","redux/target/target.actions.js","components/select-name/select-name.component.jsx","redux/name/name-action.js","components/action-button/action-button.component.jsx","pages/choose-target/choose-target.component.jsx","components/the-square/the-square.component.jsx","redux/stats/stats.actions.js","redux/stats/stats.selectors.js","components/squares-game/squares-game.component.jsx","redux/final-stats/final-stats.selectors.js","components/final-average/final-average.component.jsx","components/game-finished-stats/game-finish-stats.component.jsx","pages/game-page/game-page.component.jsx","redux/final-stats/final-stats.actions.js","pages/home-page/home-page.component.jsx","App.js","reportWebVitals.js","redux/final-stats/final-stats.types.js","redux/final-stats/final-stats.utils.js","redux/final-stats/final-stats.reducer.js","redux/name/name.types.js","redux/name/name.reducer.js","redux/stats/stats.types.js","redux/stats/stats.utils.js","redux/stats/stats.reducer.js","redux/stats/stats.data.js","redux/target/target.types.js","redux/target/target.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["selectTarget","state","target","selectCurrentTarget","createSelector","currentTarget","allTargets","selectTheName","name","theName","connect","dispatch","setCurrentTarget","type","payload","theTarget","className","isNaN","parseInt","onClick","setName","placeholder","onChange","e","value","ActionButton","children","chooseTargetButton","finishButton","otherProps","mapStateToProps","createStructuredSelector","map","to","setSquareResults","theClass","valueIsNaN","onBlur","getResults","stats","getTheResults","results","squareResults","getTheSquares","allSquares","theValue","getAverage","length","reduce","a","b","toFixed","SquaresGame","this","props","square","class","id","React","Component","showStats","finalStats","showFinalStats","gamesFinalStats","allSquareResults","allSumResults","sumOfAllSquareResultsItems","theHeighestArray","find","item","Math","max","FinalAverage","finalStat","theGameSet","theStatsAverage","index","GamePage","incrementSet","newSet","gameSet","setState","emptyValue","document","querySelector","getAllTheStats","getTheTarget","getTheSetNumber","setTheAverage","theAverage","pushAllSquares","theResults","pushSumAllSquareResults","finishTheGame","newGame","startAnewGame","alert","history","push","console","log","allTheSquareResults","heighestArray","eachHeighestResult","finalAverage","pushAllSquareResults","HomePage","homeButtons","App","exact","path","component","chooseTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","finalStatsActionTypes","FINAL_STATS","THE_TARGET","SET_AVERAGE","THE_SET","PUSH_ALL_SQUARE_RESULTS","PUSH_SUM_ALL_SQUARE_RESULTS","pushSum","theSum","forEach","INITIAL_STATE","allTheStats","finalStatsReducer","action","nameActionTypes","SET_NAME","START_A_NEW_GAME","nameReducer","statsActionTypes","SET_SQUARE_RESULTS","IS_THE_VALUE_NAN","addTheResults","theSquare","thePoints","statsReducer","targetActionTypes","SET_TARGET","SET_CLASS","targetReducer","combineReducers","middlewares","logger","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8b074aff.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\n\nconst selectTarget = state => state.target;\n\nexport const selectCurrentTarget = createSelector(\n    [selectTarget], \n    target => target.currentTarget\n);\n\nexport const allTargets = createSelector(\n    [selectTarget],\n    target => target.allTargets\n)\n\n//export const selectTheTarget = createSelector(\n//    [selectCurrentTarget],\n//    theTarget => document.querySelector(theTarget).value\n//);","import { createSelector } from 'reselect';\n\nconst selectName = state => state.name;\n\nexport const selectTheName = createSelector(\n    [selectName], \n    name => name.theName\n);","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './the-target.styles.css';\n\nimport { setCurrentTarget } from '../../redux/target/target.actions';\n\nconst TheTarget = ({ theTarget, setCurrentTarget }) => {\n    return(\n        <div className={`${isNaN(parseInt(theTarget)) ? 'red' : ''} ${parseInt(theTarget) % 2 ? 'black' : 'yellow'}\n        target-holder`} onClick={() => setCurrentTarget(theTarget)}><span className='target'>{theTarget}</span></div>\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    // setCurrentTarget will take theTarget and will set it as currentTarget state in target.reducer\n    // it is called when the user clicks on TheTarget component\n    setCurrentTarget: target => dispatch(setCurrentTarget(target))  \n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n    )(TheTarget);\n","export const setCurrentTarget = target => ({\n    type: 'SET_TARGET',\n    payload: target\n});","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './select-name.styles.css';\n\nimport { setName } from '../../redux/name/name-action';\n\nconst SelectName = ({ setName }) => {\n    return(\n        <input\n            className='select-name'\n            placeholder='Enter your name'\n            onChange={e => {{setName(e.target.value)}}}\n        />\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    // this action takes the name inputed in the input field and takes it to name.reducer\n    setName: theName => dispatch(setName(theName))  \n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n    )(SelectName);","export const setName = theName => ({\n    type: 'SET_NAME',\n    payload: theName\n});","import React from 'react';\n\nimport './action-button.styles.css';\n\nconst ActionButton = ({ children, chooseTargetButton, finishButton, ...otherProps }) => {\n    return(\n        <button className={`${chooseTargetButton ? 'choose-target-button' : ''} ${finishButton ? 'finish-button' : ''} \n            action-button`}\n            {...otherProps}\n        >\n            {children}\n        </button>\n    );\n};\n\nexport default ActionButton;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport './choose-target.styles.css';\n\nimport { setCurrentTarget } from '../../redux/target/target.actions';\n\nimport { allTargets } from '../../redux/target/target.selectors';\nimport { selectCurrentTarget } from '../../redux/target/target.selectors';\nimport { selectTheName } from '../../redux/name/name.selectors';\n\nimport TheTarget from '../../components/theTarget/the-target.component';\nimport SelectName from '../../components/select-name/select-name.component';\nimport ActionButton from '../../components/action-button/action-button.component';\n\n\n\nconst chooseTarget = ({ allTargets, currentTarget }) => {\n    return(\n        <div className='choose-target-div'>\n            <SelectName />\n            <h2>Choose Target</h2>\n            <div className='targets'>\n                {allTargets.map((theTarget) => (\n                    <TheTarget key={theTarget} theTarget={theTarget} />\n                ))}\n            </div>\n            <div className='current-target'>Target Chosen: {currentTarget}</div>\n            <Link to='/game-page'>\n                <ActionButton chooseTargetButton>START THE GAME</ActionButton>\n            </Link>\n        </div>\n    );\n};\n\nconst mapStateToProps = createStructuredSelector({\n    allTargets: allTargets,\n    currentTarget: selectCurrentTarget,\n    theName: selectTheName \n });\n\n//const mapDispatchToProps = dispatch => ({\n//    setCurrentTarget: target => dispatch(setCurrentTarget(target))  \n//});\n\nexport default connect(\n    mapStateToProps, \n    )(chooseTarget);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { isTheValueNaN, setSquareResults } from '../../redux/stats/stats.actions';\n\nimport './the-square.styles.css';\n\nconst TheSquare = ({setSquareResults, valueIsNaN, theClass}) => {\n    return(\n        <input \n            className={`the-square ${theClass}`}\n            onBlur={(e) => {isNaN(parseInt(e.target.value)) ? valueIsNaN() :  setSquareResults(theClass)}}\n        />\n    );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    // this action is being pulled from stats.actions and it takes the class of each square\n    // the class is taken to stats.reducer, which will call addToResults() function with the class as as argument\n    // addToResult() will take the class and based on it, it will get the element's value\n    setSquareResults: theClass => dispatch(setSquareResults(theClass)),\n    valueIsNaN: () => dispatch(isTheValueNaN()) \n});\n\nexport default connect(\n    null,\n    mapDispatchToProps\n    )(TheSquare);\n","export const setSquareResults = result => ({\n    // this action will bring the class of the square from the the-square component \n    type: 'SET_SQUARE_RESULTS',\n    payload: result\n});\n\nexport const startAnewGame = () => ({\n    // this action will empty the squareResults array\n    type: 'START_A_NEW_GAME',\n});\n\nexport const isTheValueNaN = () => ({\n    // this action will be executed in the-square component, only if the parseInt(value) of the square is NaN\n    type: 'IS_THE_VALUE_NAN'\n});","import { createSelector } from 'reselect';\n\nconst getResults = state => state.stats\n\nexport const getTheResults = createSelector(\n    [getResults], \n    results => results.squareResults\n);\n\nexport const getTheSquares = createSelector(\n    [getResults], \n    results => results.allSquares\n);\n\nexport const getTheValue = createSelector(\n    [getResults], \n    results => results.theValue\n);\n\nexport const valueIsNaN = createSelector(\n    [getResults], \n    results => results.valueIsNaN\n);\n\nexport const getAverage = createSelector(\n    [getTheResults], \n    results => { \n        if (results.length) {\n            // this function calculates the average of the items in squareResults array and rounds up the result to 1 decimal\n            const result = results.reduce((a,b) => a + b, 0) / results.length\n            const roundResult = result.toFixed(1)\n            return roundResult\n        } else {\n            // it returns 0 if there are no items in the squareResults array\n            return 0\n        };\n    }\n);","import React from 'react';\nimport { connect } from 'react-redux'\nimport { createStructuredSelector } from 'reselect';\n\nimport './squares-game.styles.css';\n\nimport TheSquare from '../the-square/the-square.component';\nimport { getTheSquares } from '../../redux/stats/stats.selectors';\n\nclass SquaresGame extends React.Component {\n    // this component maps through all allSquares array pulled from stats.selector\n    // and for each one, it displays TheSquare component\n    constructor() {\n        super();\n    };\n    \n    render() {\n        return(\n            <div className='all-squares'>\n                {this.props.allSquares.map((square) => (\n                    <TheSquare key={square.id} theClass={square.class}/>\n                ))}\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = createStructuredSelector({\n    allSquares: getTheSquares\n });\n\n//const mapDispatchToProps = dispatch => ({\n//    setCurrentTarget: target => dispatch(setCurrentTarget(target))  \n//});\n\nexport default connect(\n    mapStateToProps\n    )(SquaresGame);\n","import { createSelector } from 'reselect';\n\nconst showStats = state => state.finalStats;\n\nexport const showFinalStats = createSelector(\n    [showStats], \n    finalStats => finalStats.gamesFinalStats\n);\n\nexport const allSquareResults = createSelector(\n    [showStats], \n    finalStats => finalStats.allSquareResults\n);\n\nexport const allSumResults = createSelector(\n    [showStats], \n    finalStats => finalStats.sumOfAllSquareResultsItems\n);\n\nexport const theHeighestArray = createSelector(\n    // this selector returns the item (array) from the allSquareResults wich sum is the heighest\n\n    // it takes the ouput of allSquareResult selector (which is the allSquareResults array) and it applies find() method\n    // the find() method will return the item from allSquareResults array whose sum equals the heighest sum from allSumResults array \n    [allSquareResults, allSumResults],  \n    (allSquareResults, allSumResults) => allSquareResults.find((item) => {\n        return item.reduce(function (a, b) { return a + b; }, 0) === Math.max(...allSumResults)\n    }) // basically the output of this selector will be the item found by find() method applied to allSquareResults\n);\n\n","import React from 'react';\n\nimport './final-average.styles.css';\n\nconst FinalAverage = ({finalStat}) => {\n    // this will display all the stats\n    return(\n        <div className='final-average'>\n            <div><strong>The Set Number:</strong><span className='stats-spans'>{finalStat.theGameSet}</span></div>\n            <div><strong>The Target:</strong><span className='stats-spans'>{finalStat.theTarget}</span></div>\n            <div><strong>The Points Average:</strong><span className='stats-spans'>{finalStat.theStatsAverage}</span></div>\n        </div>\n    );\n};\n\nexport default FinalAverage","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { showFinalStats } from '../../redux/final-stats/final-stats.selectors';\n\nimport FinalAverage from '../final-average/final-average.component';\n\nimport './game-finish-stats.styles.css';\n\nconst GameFinishStats = ({finalStats}) => {\n    return(\n        <div className='game-finish-stats'>\n           {finalStats.map((finalStat, index) => (\n                    <FinalAverage key={index} finalStat={finalStat}/>\n                ))}\n        </div>\n    );\n};\n\nconst mapStateToProps = createStructuredSelector({\n    // final stats is the array pulled from final-stats.reducer and it contains all the stats\n    finalStats: showFinalStats,\n });\n\nexport default connect(\n    mapStateToProps\n    )(GameFinishStats);","import React from 'react';\nimport { connect } from 'react-redux'\nimport { createStructuredSelector } from 'reselect';\n\nimport './game-page.styles.css';\n\nimport SquaresGame from '../../components/squares-game/squares-game.component';\nimport GameFinishStats from '../../components/game-finished-stats/game-finish-stats.component';\n\nimport { selectCurrentTarget } from '../../redux/target/target.selectors';\nimport { selectTheName } from '../../redux/name/name.selectors';\nimport { getAverage, getTheResults, getTheSquares, valueIsNaN } from '../../redux/stats/stats.selectors';\n\nimport { finishTheGame, getTheSetNumber, getTheTarget, pushAllSquareResults, pushSumAllSquareResults, setTheAverage } from '../../redux/final-stats/final-stats.actions';\nimport { startAnewGame } from '../../redux/stats/stats.actions';\nimport ActionButton from '../../components/action-button/action-button.component';\nimport { allSquareResults, allSumResults, theHeighestArray } from '../../redux/final-stats/final-stats.selectors';\n\nclass GamePage extends React.Component {\n\n    constructor() {\n        super();\n\n        this.state = {\n            gameSet: 1\n        };\n    };\n\n    componentDidMount() {\n        // this function redirects you to choose-target page \n        // if no target is selected when the component mounts \n        if (this.props.currentTarget == null) {\n            alert('Please select a target');\n            this.props.history.push('/choose-target')\n        }\n        \n    }\n\n    incrementSet = () => {\n        // this function increments the game number\n        // it is executed in newGame function\n        const gameSet = this.state.gameSet;\n        const newSet = gameSet + 1;\n        this.setState({ gameSet: newSet });\n    };\n\n    emptyValue = () => {\n        // this function sets the value of each square to null\n        {this.props.allSquares.map((square) => (\n            document.querySelector(`.${square.class}`).value=''\n        ))};\n    };\n\n    getAllTheStats =() => {\n        // this function executes the actions created in final-stats.actions\n        // it is called when the 'finish' action button is clicked\n        this.props.getTheTarget(this.props.currentTarget)\n        this.props.getTheSetNumber(this.state.gameSet)\n        this.props.setTheAverage(this.props.theAverage)\n        this.props.pushAllSquares(this.props.theResults) // this action pushes squareResults pulled from stats.reducer into allSquareResults from final-stats reducer\n        this.props.pushSumAllSquareResults()\n        this.props.finishTheGame()\n    }\n\n    newGame = () => {\n        // this function is called when the 'finish' action button is clicked\n        this.props.startAnewGame() // this action is created in stats.actions and sets the squareResults array to an empty array\n        this.emptyValue()\n        this.incrementSet()\n    }\n\n    render() {\n        console.log(this.props.theResults)\n        console.log(this.props.allTheSquareResults)\n        console.log(this.props.allSumResults)\n        console.log(this.props.heighestArray)\n    return(\n        <div>\n            <div className='game-details-div'>\n                <h2>Game On {this.props.theName}</h2>\n                <h2>Set {this.state.gameSet}</h2>\n                <h2>Target {this.props.currentTarget}</h2>\n            </div>\n            <div className='game-results'>\n                <SquaresGame />\n            </div>\n            <div className={`${this.props.valueIsNaN ? 'red' : null} the-average-square`}>\n                <span className='the-average-span'>{this.props.theAverage}</span>\n            </div>\n            <div className='finish'>\n                <ActionButton \n                    finishButton\n                    onClick={() => {\n                        this.getAllTheStats()\n                        this.newGame()\n                        }}\n                >\n                    Finish\n                </ActionButton>\n            </div>\n            <div className='the-heighest-array'>\n                <h3>Best Set Entries:</h3>\n                {this.props.heighestArray ? this.props.heighestArray.map((eachHeighestResult) => (\n                    <span className='eachHeighestResult'>{eachHeighestResult}</span>\n                )): <span className='eachHeighestResult'>NO ENTRIES SO FAR</span> }\n            </div>\n            <div>\n                <GameFinishStats />\n            </div>\n        </div>\n    );\n}};\n\n// <div id={if (condition) { 'msg' }}>Hello World!</div>\n\nconst mapStateToProps = createStructuredSelector({\n   currentTarget: selectCurrentTarget,\n   theName: selectTheName,\n   theResults: getTheResults,\n   theAverage: getAverage,\n   allSquares: getTheSquares,\n   allTheSquareResults: allSquareResults,\n   allSumResults: allSumResults,\n   heighestArray: theHeighestArray,\n   valueIsNaN: valueIsNaN\n});\n\nconst mapDispatchToProps = dispatch => ({\n    finishTheGame: () => dispatch(finishTheGame()),\n    getTheTarget: theTarget => dispatch(getTheTarget(theTarget)),\n    setTheAverage: finalAverage => dispatch(setTheAverage(finalAverage)),\n    getTheSetNumber: gameSet => dispatch(getTheSetNumber(gameSet)),\n    startAnewGame: () => dispatch(startAnewGame()),\n    pushAllSquares: squareResults => dispatch(pushAllSquareResults(squareResults)),\n    pushSumAllSquareResults: () => dispatch(pushSumAllSquareResults()) \n});\n\nexport default connect(mapStateToProps,mapDispatchToProps)(GamePage);","export const finishTheGame = () => ({\n    type: 'FINAL_STATS',\n});\n\nexport const getTheTarget = theTarget => ({\n    type: 'THE_TARGET',\n    payload: theTarget\n});\n\nexport const getTheSetNumber = gameSet => ({\n    type: 'THE_SET',\n    payload: gameSet\n});\n\nexport const setTheAverage = finalAverage => ({\n    type: 'SET_AVERAGE',\n    payload: finalAverage\n});\n\nexport const pushAllSquareResults = squareResults => ({\n    type: 'PUSH_ALL_SQUARE_RESULTS',\n    payload: squareResults\n});\n\nexport const pushSumAllSquareResults = squareResults => ({\n    type: 'PUSH_SUM_ALL_SQUARE_RESULTS'\n});","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport ActionButton from '../../components/action-button/action-button.component';\n\nimport './home-page.styles.css';\n\nconst HomePage = () => {\n    return(\n        <div className='home-page'>\n            <h1 className='home-title'>DARTS MASTER PRACTICE II</h1>\n            <div className='action-buttons'>\n                <Link to='/choose-target'>\n                    <ActionButton homeButtons>START</ActionButton>\n                </Link>\n                <Link to='/about'>\n                    <ActionButton homeButtons>ABOUT</ActionButton>\n                </Link>\n            </div>\n        </div>\n    );\n};\n\nexport default HomePage;","import React from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport './App.css';\n\nimport chooseTarget from './pages/choose-target/choose-target.component';\nimport GamePage from './pages/game-page/game-page.component';\nimport HomePage from './pages/home-page/home-page.component';\n\nimport { selectCurrentTarget } from './redux/target/target.selectors';\n\nclass App extends React.Component {\n\n  render() {\n  return (\n      <div>\n        <Route exact path='/' component={ HomePage } />\n        <Route exact path='/choose-target' component={ chooseTarget } />\n        <Route exact path='/game-page' component={ GamePage } />\n      </div>\n    );\n  };\n};\n\nconst mapStateToProps = createStructuredSelector({\n  currentTarget: selectCurrentTarget,\n});\n\n// <Redirect to='/choose-target' />\n\n// <Route exact path='/game-page' component={ GamePage } />\n\n//<Route \n//            exact \n//            path='/game-page' \n//            render={() => this.props.currentTarget ? (\n//              <GamePage />) : (\n//                <Redirect hello='hello' to='/choose-target' />\n//              )\n//            } \n//          />\n\nexport default connect(\n  mapStateToProps\n  )(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const finalStatsActionTypes = {\n    FINAL_STATS: 'FINAL_STATS',\n    THE_TARGET: 'THE_TARGET',\n    SET_AVERAGE: 'SET_AVERAGE',\n    THE_SET: 'THE_SET',\n    PUSH_ALL_SQUARE_RESULTS: 'PUSH_ALL_SQUARE_RESULTS',\n    PUSH_SUM_ALL_SQUARE_RESULTS: 'PUSH_SUM_ALL_SQUARE_RESULTS'\n  };\n\nexport default finalStatsActionTypes;","export const pushSum = (sumOfAllSquareResultsItems, allSquareResults, theSum) => {\n    //this calculates the sum of each item (array) of allSquareResults and pushes each sum to sumOfAllSquareResultsItems array\n    allSquareResults.forEach((item) => {\n        theSum = item.reduce(function (a, b) { return a + b; }, 0)\n    });\n    return [...sumOfAllSquareResultsItems, theSum]\n};","import finalStatsActionTypes from \"./final-stats.types\";\nimport { pushSum } from \"./final-stats.utils\";\n\nconst INITIAL_STATE = {\n    gamesFinalStats: [],\n    allTheStats: {\n        theTarget: '',\n        theGameSet: '',\n        theStatsAverage: '',\n    },\n    allSquareResults: [], // this array should contain all squareResults arrays from stats.reducer state\n    sumOfAllSquareResultsItems: [] // this array should contain the sums of all squareResults items (the squareResults arrays) contained by allSquareResults array\n}\n\nconst finalStatsReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case finalStatsActionTypes.THE_TARGET:\n            return {\n                ...state, // the rest of the state spread\n                allTheStats: {\n                    ...state.allTheStats,\n                    theTarget: action.payload\n                }\n            }\n\n        case finalStatsActionTypes.THE_SET:\n            return {\n                ...state, // the rest of the state spread\n                allTheStats: {\n                    ...state.allTheStats,\n                    theGameSet: action.payload\n                }\n            }\n\n        case finalStatsActionTypes.SET_AVERAGE:\n            return {\n                ...state, // the rest of the state spread\n                allTheStats: {\n                    ...state.allTheStats,\n                    theStatsAverage: action.payload\n                }\n            }\n\n        case finalStatsActionTypes.FINAL_STATS:\n            return {\n                ...state, // the rest of the state spread\n                gamesFinalStats: [...state.gamesFinalStats, state.allTheStats]\n            }\n\n        case finalStatsActionTypes.PUSH_ALL_SQUARE_RESULTS:\n            // the action.payload here is the squareResults array from stats.reducer\n            // it performed in game-page component\n            return {\n                ...state, // the rest of the state spread\n                allSquareResults: [...state.allSquareResults, action.payload]\n            }\n\n        case finalStatsActionTypes.PUSH_SUM_ALL_SQUARE_RESULTS:\n            // this calculates the sum of each item (array) of allSquareResults and pushes each sum to sumOfAllSquareResultsItems array\n            // it does this by seting the return of pushSum() function to sumOfAllSquareResultsItems array\n            return {\n                ...state, // the rest of the state spread\n                sumOfAllSquareResultsItems: pushSum(state.sumOfAllSquareResultsItems, state.allSquareResults)\n            }\n    \n        default:\n            return state;\n    };\n};\n\nexport default finalStatsReducer;","const nameActionTypes = {\n    SET_NAME: 'SET_NAME',\n    START_A_NEW_GAME: 'START_A_NEW_GAME'\n  };\n\nexport default nameActionTypes;","import nameActionTypes from \"./name.types\";\n\nconst INITIAL_STATE = {\n    theName: null\n}\n\nconst nameReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case nameActionTypes.SET_NAME:\n            return {\n                ...state, // the rest of the state spread\n                theName: action.payload\n            }\n\n        default:\n            return state;\n    };\n};\n\nexport default nameReducer;\n\n","const statsActionTypes = {\n    SET_SQUARE_RESULTS: 'SET_SQUARE_RESULTS',\n    START_A_NEW_GAME: 'START_A_NEW_GAME',\n    IS_THE_VALUE_NAN: 'IS_THE_VALUE_NAN'\n  };\n\nexport default statsActionTypes;","export const addTheResults = (squareResults, theClass) => {\n    const theSquare = document.querySelector(`.${theClass}`);\n    const thePoints = parseInt(theSquare.value);\n    return [...squareResults, thePoints]\n};","import statsActionTypes from \"./stats.types\";\nimport { addTheResults } from \"./stats.utils\";\nimport ALL_SQUARES_DATA from \"./stats.data\";\n\nconst INITIAL_STATE = {\n    allSquares: ALL_SQUARES_DATA,\n    squareResults: [],\n    valueIsNaN: false\n};\n\nconst statsReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case statsActionTypes.SET_SQUARE_RESULTS:\n            return {\n                ...state, \n                squareResults: addTheResults(state.squareResults, action.payload),\n                valueIsNaN: false\n            }\n\n        case statsActionTypes.START_A_NEW_GAME:\n            return {\n                ...state,\n                squareResults: []\n            }\n\n        case statsActionTypes.IS_THE_VALUE_NAN:\n            return {\n                ...state,\n                valueIsNaN: true\n            }\n\n        default:\n            return state;\n    };\n};\n\nexport default statsReducer;\n\n","const ALL_SQUARES_DATA = [\n    {\n        id: 1,\n        class: 'first',\n    },\n    {\n        id: 2,\n        class: 'second',\n    },\n    {\n        id: 3,\n        class: 'third',\n    },\n    {\n        id: 4,\n        class: 'fourth',\n    },\n    {\n        id: 5,\n        class: 'fifth',\n    },\n]\n\nexport default ALL_SQUARES_DATA","const targetActionTypes = {\n    SET_TARGET: 'SET_TARGET',\n    SET_CLASS: 'SET_CLASS'\n  };\n\nexport default targetActionTypes;","import targetActionTypes from \"./target.types\";\n\nconst INITIAL_STATE = {\n    allTargets: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'Bull', 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\n    currentTarget: null\n}\n\nconst targetReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case targetActionTypes.SET_TARGET:\n            return {\n                ...state, \n                currentTarget: action.payload\n            }\n\n        default:\n            return state;\n    };\n};\n\nexport default targetReducer;","import { combineReducers } from 'redux';\nimport finalStatsReducer from './final-stats/final-stats.reducer.js';\nimport nameReducer from './name/name.reducer.js';\nimport statsReducer from './stats/stats.reducer.js';\nimport targetReducer from './target/target.reducer.js';\n\nexport default combineReducers({\n    target: targetReducer,\n    name: nameReducer,\n    stats: statsReducer,\n    finalStats: finalStatsReducer\n});","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\n\nimport rootReducer from './root-reducer';\n\nconst middlewares = [logger];\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store.js';\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}